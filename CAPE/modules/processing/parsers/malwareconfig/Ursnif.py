# Copyright (C) 2017 Kevin O'Reilly (kevin.oreilly@contextis.co.uk)
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
    
import struct
import os.path

MAX_STRING_SIZE = 256

def string_from_offset(buffer, offset):
    string = buffer[offset:offset+MAX_STRING_SIZE].split("\0")[0]
    return string

def get_config_item(config, offset):
    config_string = string_from_offset(config, offset)
    if ' ' in config_string:
        config_list = config_string.split(' ')
        return config_list
    else:
        return config_string

def config(raw_data):
    number_of_sections = struct.unpack('I', raw_data[0:4])[0]
    section_offset = 8
    section_count = 0
    config_dict = {}
        
    while section_count < number_of_sections:
        section_key  = struct.unpack('I', raw_data[section_offset:section_offset+4])[0]
        section_type = struct.unpack('I', raw_data[section_offset+4:section_offset+8])[0]
        if section_type == 1:
            data_offset = struct.unpack('I', raw_data[section_offset+8:section_offset+12])[0]
            config_item = get_config_item(raw_data, section_offset + data_offset)
            if config_item == None:
                continue
            if section_key == 0xD0665BF6:
                config_dict['Domains'] = config_item
            elif section_key == 0x73177345:
                config_dict['DGA Base URL'] = config_item
            elif section_key == 0xCD850E68:
                config_dict['DGA CRC'] = config_item
            elif section_key == 0xC61EFA7A:
                config_dict['DGA TLDs'] = config_item
            elif section_key == 0x510F22D2:
                config_dict['TOR Domains'] = config_item
            elif section_key == 0xDF351E24:
                config_dict['32-bit DLL URLs'] = config_item
            elif section_key == 0x4B214F54:
                config_dict['64-bit DLL URLs'] = config_item
            elif section_key == 0xEC99DF2E:
                config_dict['IP Service'] = config_item
            elif section_key == 0x11271C7F:
                config_dict['Timer'] = config_item
            elif section_key == 0xDF2E7488:
                config_dict['DGA Season'] = config_item
            elif section_key == 0x556AED8F:
                config_dict['Server'] = config_item
            elif section_key == 0x4FA8693E:
                config_dict['Encryption key'] = config_item
            elif section_key == 0xD7A003C9:
                config_dict['Config Fail Timeout'] = config_item
            elif section_key == 0x18A632BB:
                config_dict['Config Timeout'] = config_item
            elif section_key == 0x31277BD5:
                config_dict['Task Timeout'] = config_item            
            elif section_key == 0x955879A6:
                config_dict['Send Timeout'] = config_item
            elif section_key == 0xACC79A02:
                config_dict['Knocker Timeout'] = config_item
            elif section_key == 0x6DE85128:
                config_dict['BC Timeout'] = config_item
            elif section_key == 0x656B798A:
                config_dict['Botnet ID'] = config_item
            elif section_key == 0xEFC574AE:
                config_dict['Value 11'] = config_item
            #elif section_key == 0x584E5925:
            #    config_dict['EndPointer'] = config_item

        section_count += 1
        section_offset += 24
    
    return config_dict

 